<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Module1" script:language="StarBasic" script:moduleType="normal">REM  *****  BASIC  *****

Sub KDProcessMacro()
	doc = ThisComponent
	sheets = doc.Sheets

	Cleanup()

	CsvURL = File("Select KD result")
	sheetI = SheetBy(CsvURL, "Import")

	CsvURL = File("Select map")
	sheetM = SheetBy(CsvURL, "Map")

    GlobalScope.BasicLibraries.loadLibrary("ScriptForge")
    Dim map As Variant
    map = CreateScriptService("Dictionary")

    ' Map has 2 columns.
    ' 1st column contains properties.
    ' 2nd column contains an object to which a propert applies.

    For row = 0 To 33 ' Make sure data is less this threshold.
        Dim propT As String
        Dim prop As String
        Dim objT As String
        Dim obj As String
        cell = sheetM.getCellByPosition(0, row) ' Map has 2 columns.
        kind = cell.getType()
        Select Case kind
        Case com.sun.star.table.CellContentType.TEXT
            propT = "TEXT"
            prop = cell.getString()
        Case Else : propT = ""
        End Select
        cell = sheetM.getCellByPosition(1, row) ' Map has 2 columns.
        kind = cell.getType()
        Select Case kind
        Case com.sun.star.table.CellContentType.TEXT
            objT = "TEXT"
            obj = cell.getString()
        Case Else : objT = ""
        End Select
        If propT = "TEXT" AND objT = "TEXT" Then
            map.Add(prop, obj)
        EndIf
    Next row

	Print map.Count

    sheetE = doc.createInstance("com.sun.star.sheet.Spreadsheet")
	sheets.insertByName("Export", sheetE)

    Dim cellT As Variant
    Dim cellC As Variant

    For row = 0 To 1024 ' Make sure data is less this threshold.
        For col = 0 To 99 ' Make sure data is less than this threshold.
            cell = sheetI.getCellByPosition(col, row)
            kind = cell.getType()
            Select Case kind
            Case com.sun.star.table.CellContentType.VALUE
                cellT = "VALUE"
                cellC = cell.getValue()
            Case com.sun.star.table.CellContentType.TEXT
                cellT = "TEXT"
                cellC = cell.getString()
            End Select
            If cellT = "VALUE" Then
                'InstructionsThen
            ElseIf cellT = "TEXT" Then
                'InstructionsElse
            Else
                ' ?
            End If
        Next col
    Next row
End Sub

Function Cleanup()
	doc = ThisComponent
	sheets = doc.Sheets

	' Delete previous data

	exists = sheets.hasByName("Import")
	if exists then sheets.removeByName("Import")

	exists = sheets.hasByName("Map")
	if exists then sheets.removeByName("Map")

	exists = sheets.hasByName("Export")
	if exists then sheets.removeByName("Export")
End Function

Function File(msg) As String
	Dim oFilePicker As Object
	oFilePicker = CreateUnoService("com.sun.star.ui.dialogs.FilePicker")
	oFilePicker.appendFilter("CSV Documents", "*.csv")
	oFilePicker.CurrentFilter = "CSV Documents"
	oFilePicker.Title = msg
	'execution and return check (OK?)
	If oFilePicker.execute = _
		com.sun.star.ui.dialogs.ExecutableDialogResults.OK Then
		File = oFilePicker.Files(0)
	End If
End Function

Function SheetBy(File, Name) As Object
	doc = ThisComponent
	sheets = doc.Sheets

	sheet = doc.createInstance("com.sun.star.sheet.Spreadsheet")
	sheets.insertByName(Name, sheet)

	' CSV encoding is assumed to be UTF-16 LE

	'csv file read options
	Filter = "44,34,65535,1,1/1"
	'Creating a link between the sheet and the .csv source
	sheet.link(File, "", "Text - txt - csv (StarCalc)", _
	Filter, com.sun.star.sheet.SheetLinkMode.VALUE)

	'release link so that the document is independent
	sheet.setLinkMode(com.sun.star.sheet.SheetLinkMode.NONE)
	SheetBy = sheet
End Function

</script:module>
