<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Module1" script:language="StarBasic" script:moduleType="normal">REM  *****  BASIC  *****

Sub KDProcessMacro()
	doc = ThisComponent
	sheets = doc.Sheets

	Cleanup()

	CsvURL = File("Select KD result")
	sheetI = SheetBy(CsvURL, "Import")

	CsvURL = File("Select map")
	sheetM = SheetBy(CsvURL, "Map")

    ' Delete default sheets after our sheets are created.
    exists = sheets.hasByName("Sheet1")
	if exists then sheets.removeByName("Sheet1")

    GlobalScope.BasicLibraries.loadLibrary("ScriptForge")
    Dim map As Variant
    map = CreateScriptService("Dictionary")
    PropsObjMap(sheetM, map) ' To fill map.

    Dim unitCount As Long
    Dim rowCountApprox As Long
    CountUnits(sheetI, unitCount, rowCountApprox)

    txtArr = Array("Units:", Str(unitCount), "map props:", Str(map.Count), "rows:", Str(rowCountApprox))
    txt = Join(txtArr, " ")
    MsgBox(txt, 0+64+0, "Info")

    Dim unitsProps() As Variant ' For each unit, there is an array of properties.
    For unit = 0 To unitCount
        Dim props() As String ' Array has no defined dimension so UBound(MyArr) = -1 and LBound(MyArr) = 0
        UnitProps(unit, map, sheetI, rowCountApprox, props) ' props to be appended.
        AppendToArray(unitsProps, props)
    Next unit

    sheetE = doc.createInstance("com.sun.star.sheet.Spreadsheet")
	sheets.insertByName("Export", sheetE)

   statusBar = doc.getCurrentController.StatusIndicator ' Reference the active document's status bar
   statusBar.start( "Processing rows ", rowCountApprox ) ' Set the initial text and limit of the status bar
   statusBar.setText( "Processing " + rowCountApprox + " rows") ' Set the status bar text

    MsgBox("Process will start. It might take some time.", 0+64+0, "Info")
    Export(sheetI, map, sheetE, unitCount, unitsProps, statusBar, rowCountApprox)
    MsgBox("Process finished.", 0+64+0, "Info")

    statusBar.end() ' Return control to the application

    ' Save only "Export" sheet as file.
    SaveAsExcel()
End Sub

Function Cleanup()
	doc = ThisComponent
	sheets = doc.Sheets

	' Delete previous data

	exists = sheets.hasByName("Import")
	if exists then sheets.removeByName("Import")

	exists = sheets.hasByName("Map")
	if exists then sheets.removeByName("Map")

	exists = sheets.hasByName("Export")
	if exists then sheets.removeByName("Export")
End Function

Function File(msg) As String
	Dim oFilePicker As Object
	oFilePicker = CreateUnoService("com.sun.star.ui.dialogs.FilePicker")
	oFilePicker.appendFilter("CSV Documents", "*.csv")
	oFilePicker.CurrentFilter = "CSV Documents"
	oFilePicker.Title = msg
	'execution and return check (OK?)
	If oFilePicker.execute = _
		com.sun.star.ui.dialogs.ExecutableDialogResults.OK Then
		File = oFilePicker.Files(0)
	End If
End Function

Function SheetBy(File, Name) As Object
	doc = ThisComponent
	sheets = doc.Sheets

	sheet = doc.createInstance("com.sun.star.sheet.Spreadsheet")
	sheets.insertByName(Name, sheet)

	' CSV encoding is assumed to be UTF-16 LE

	'csv file read options
	Filter = "44,34,65535,1,1/1"
	'Creating a link between the sheet and the .csv source
	sheet.link(File, "", "Text - txt - csv (StarCalc)", _
	Filter, com.sun.star.sheet.SheetLinkMode.VALUE)

	'release link so that the document is independent
	sheet.setLinkMode(com.sun.star.sheet.SheetLinkMode.NONE)
	SheetBy = sheet
End Function

Sub PropsObjMap(sheetM, map) ' ByRef is default.
    ' Map has 2 columns.
    ' 1st column contains properties.
    ' 2nd column contains an object to which a propert applies.

    For row = 0 To 9 ' Make sure data is less this threshold.
        Dim propT As String : propT = ""
        Dim prop As String : prop = ""
        Dim objT As String : objT = ""
        Dim obj As String : obj = ""
        cell = sheetM.getCellByPosition(0, row) ' Map has 2 columns.
        kind = cell.getType()
        Select Case kind
        Case com.sun.star.table.CellContentType.TEXT
            propT = "TEXT"
            prop = cell.getString()
        Case Else : propT = ""
        End Select
        cell = sheetM.getCellByPosition(1, row) ' Map has 2 columns.
        kind = cell.getType()
        Select Case kind
        Case com.sun.star.table.CellContentType.TEXT
            objT = "TEXT"
            obj = cell.getString()
        Case Else : objT = ""
        End Select
        If propT = "TEXT" AND objT = "TEXT" Then
            map.Add(prop, obj)
        EndIf
    Next row
End Sub

Sub CountUnits(sheetI, ByRef unitCount As Long, ByRef rowCountApprox As Long)
    unitCount = -1
    rowCountApprox = -1
    For row = 0 To 1024 ' Make sure data is less this threshold.
        Dim cellT As String : cellT = ""
        Dim cellC As Long : cellC = -1
        cell = sheetI.getCellByPosition(0, row)
        kind = cell.getType()
        Select Case kind
        Case com.sun.star.table.CellContentType.VALUE
            cellT = "VALUE"
            cellC = cell.getValue()
        Case Else : cellT = ""
        End Select

        If cellT = "VALUE" Then
            If cellC > unitCount Then
                unitCount = cellC
                rowCountApprox = row + 50 ' Assume the last unit has 50 rows, to be safe.
            End If
        Else
            ' This cell is not a number value.
        End If
    Next row
End Sub

Function rowUnit(sheetI, row, ByRef unit As Long)
    Dim cellT As String : cellT = ""
    Dim cellC As Long : cellC = 0
    cell = sheetI.getCellByPosition(0, row)
    kind = cell.getType()
    Select Case kind
    Case com.sun.star.table.CellContentType.VALUE
        cellT = "VALUE"
        cellC = cell.getValue()
    Case Else : cellT = ""
    End Select

    If cellT = "VALUE" Then
        unit = cellC
    Else
        unit = -1
    End If
End Function

Sub UnitProps(unit, map, sheetI, rowCountApprox, props)
    For row = 0 To rowCountApprox
        Dim cellT As String : cellT = ""
        Dim cellC As Long : cellC = 0
        cell = sheetI.getCellByPosition(0, row)
        kind = cell.getType()
        Select Case kind
        Case com.sun.star.table.CellContentType.VALUE
            cellT = "VALUE"
            cellC = cell.getValue()
        Case Else : cellT = ""
        End Select

        If cellT = "VALUE" AND cellC = unit Then
            For col = 1 To 14 ' Make sure data is less than this threshold.
                Dim cell_T As String : cell_T = ""
                Dim cell_C As String : cell_C = ""
                cell = sheetI.getCellByPosition(col, row)
                kind = cell.getType()
                Select Case kind
                Case com.sun.star.table.CellContentType.TEXT
                    cell_T = "TEXT"
                    cell_C = cell.getString()
                End Select

                If cell_T = "TEXT" Then
                    Dim keys As Variant, key As String
                    keys = map.Keys
                    For Each key In keys
                        match = Trim(key) ' Delete leftmost and rightmost spaces.
                        pos = InStr(cell_C, match)
                        If pos > 0 Then ' Does row contain any of the map keys?
                            AppendToArray(props, key)
                        Else
                        End If
                    Next key
                Else
                    ' Nothing.
                End If
            Next col
        Else
            ' This row is not related to desired unit.
        End If

    Next row
End Sub

Sub AppendToArray(oData(), ByVal x)
    Dim iUB As Integer 'The upper bound of the array.
    Dim iLB As Integer 'The lower bound of the array.
    iUB = UBound(oData())
    iLB = LBound(oData())
    if iUB = -1 and iLB = 0 then ' An array has no defined dimension.
        Redim oData(iLB)
    else
        ReDim Preserve oData(iLB To iUB +1)
    endif
    oData(iUB +1) = x
End Sub

Sub Export(sheetI, map, sheetE, unitCount, unitsProps, statusBar, rowCountApprox)
    For row = 0 To rowCountApprox
        Dim unit As Long
        rowUnit(sheetI, row, unit) ' unit to be figured out.
        statusBar.setValue( row ) ' Set the status bar value
        If unit > -1 Then
            For col = 0 To 14 ' Make sure data is less than this threshold.
                Dim cellT As String : cellT = ""
                Dim cellC As Variant : cellC = 0.0
                cell = sheetI.getCellByPosition(col, row)
                kind = cell.getType()
                Select Case kind
                Case com.sun.star.table.CellContentType.VALUE
                    cellT = "VALUE"
                    cellC = cell.getValue()
                Case com.sun.star.table.CellContentType.TEXT
                    cellT = "TEXT"
                    cellC = cell.getString()
                Case com.sun.star.table.CellContentType.EMPTY
                    cellT = "EMPTY"
                    cellC = EMPTY
                Case com.sun.star.table.CellContentType.FORMULA
                    cellT = "FORMULA"
                    cellC = cell.getFormula()
                Case Else
                    cellT = "Unknown"
                    cellC = EMPTY
                End Select

                ' Append property to specific cells.
                If cellT = "TEXT" Then
                    Dim keys As Variant, key As String
                    keys = map.Keys
                    For Each key In keys
                        ' Check if property applies to this unit.
                        props = unitsProps(unit)
                        LB = LBound(props)
                        UB = UBound(props)
                        For propI = LB to UB
                            prop = props(propI)
                            prop = Trim(prop) ' Get rid of left and right spaces, if any.
                            key = Trim(key) ' Get rid of left and right spaces, if any.
                            If key = prop Then ' This unit has the property.
                                match = map.Item(key)
                                match = Trim(match) ' Delete leftmost and rightmost spaces.
                                pos = InStr(cellC, match)
                                If pos > 0 Then ' Does cell contain any of the map keys?
                                    cellCArr = Array(cellC, key)
                                    cellC = Join(cellCArr, " === ")
                                End If
                            End If
                        Next propI
                    Next key
                Else
                    ' Nothing.
                End If

                ' Write to export sheet.
                cell = sheetE.getCellByPosition(col, row)
                If cellT = "VALUE" Then
                    cell.setValue(cellC)
                ElseIf cellT = "TEXT" Then
                    cell.setString(cellC)
                ElseIf cellT = "FORMULA" Then
                    cell.setFormula(cellC)
                    MsgBox("Data type is formula.", 0+48+0, "Warning")
                ElseIf cellT = "EMPTY" Then
                    ' Do nothing for empty.
                Else
                    MsgBox("Data type is unkown.", 0+48+0, "Warning")
                End If
            Next col
        End If
    Next row
End Sub

Sub SaveAsExcel()
	doc = ThisComponent
	sheets = doc.Sheets

    Dim FilterNames(1,2) As String, Result As String
	FilterNames(0,0) = "Excel 2007-365" : FilterNames(0,1) = "*.xlsx" : FilterNames(0,2) = "calc8"
    ' User home directory is used to save file.
	Dim oSubst As Object, Home As String
	oSubst = CreateUnoService("com.sun.star.util.PathSubstitution")
	Home = oSubst.getSubstituteVariableValue("$(home)")
    GlobalScope.BasicLibraries.LoadLibrary("Tools")
	Result = StoreDocument(doc, FilterNames, "", Home)
	If Result = "" Then
		MsgBox("File not saved", 0+16+0, "Error")
	Else
		MsgBox ("File saved as " + ConvertFromURL(Result), 0+64+0, "Info")
	EndIf
End Sub

</script:module>
